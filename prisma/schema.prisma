generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  apiKey    String     @unique @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String?
  salt      String     @unique
  App       App[]
  endpoints Endpoint[]
  urls      UrlShort[]
}

model App {
  id        String     @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  plan      Plan       @default(Free_Plan)
  user      User       @relation(fields: [userId], references: [id])
  endpoint  Endpoint[]
  urls      UrlShort[]
}

model Endpoint {
  id               String              @id @default(uuid())
  url              String
  userId           String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  subscribedEvents EventsToSubscribe[]
  /// webhook name/desc
  description      String
  signingSecret    String
  appId            String
  app              App                 @relation(fields: [appId], references: [id], onDelete: Cascade)
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  WebhookRequest   WebhookRequest[]
}

model UrlShort {
  id          String         @id @default(nanoid())
  original    String
  shortId     String         @unique
  userId      String
  createdAt   DateTime       @default(now())
  appId       String?
  description String?
  updatedAt   DateTime       @updatedAt
  clicks      ClickTracker[]
  App         App?           @relation(fields: [appId], references: [id])
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClickTracker {
  id        String   @id @default(uuid())
  urlId     String
  ip        String?
  country   String?
  userAgent String?
  createdAt DateTime @default(now())
  region    String?
  url       UrlShort @relation(fields: [urlId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model WebhookRequest {
  id         String   @id @default(uuid())
  appId      String
  statusCode Int
  response   String?
  payload    Json
  eventType  String
  createdAt  DateTime @default(now())
  endpointId String
  durationMs Int
  endpoint   Endpoint @relation(fields: [endpointId], references: [id])
}

enum EventsToSubscribe {
  user_created
  user_updated
  user_deleted
  link_created
  link_updated
  link_deleted
  link_clicked
}

enum Plan {
  Free_Plan
  Premium_Plan
  Enterprise_Plan
}
